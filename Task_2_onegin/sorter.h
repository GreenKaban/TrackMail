#pragma once
#include <wchar.h>
#include <assert.h>


#ifdef NDEBUG
#define Assert_c(expr) if(!(expr))printf("Expression %ls is false.\n In file: %ls\n line: %d\n",_CRT_WIDE(#expr), _CRT_WIDE(__FILE__), (unsigned)(__LINE__)); ///< Реализация assert для релиза
#else
#define Assert_c(expr) assert(expr); ///< Реализация assert для отладки переключить режим можно директивой #define NDEBUG
#endif

enum Direction {Direct = 1, Inverse = 0}; ///< Направление сравнения строк


typedef wchar_t* C_string; ///< Строка из расширенных символов



const int SS_ERROR_NULLPTR = -1; ///< Возвращается, если по ходу работы функции возникает нулевой указатель
const int SS_ERROR_ACCESS_FAIL = -2; ///< Возвращается, если при ошибке доступа к файлу


/**
\brief Функция сравнения двух строк, игнорирующая знаки препинания
\detail Данная функция сравнивает две строки. Направление сравнения может быть задано параметром inc.
Если inc = 1, то в качестве указателей пределается начало строк.
Если inc = -1, то в качестве указателя требуется предавать конец строки.
\param  [in]   ptr1    Первая строка
\param  [in]   ptr2    Вторая строка
\param  [in]   inc     Добавляемое значение
\retrun Возвращает положительное число, если первая строка идет позже (в смысле лексиграфического порядка),
чем вторая строка. Соответсвенно возвращает отрицательное, если вторая строка идет позже первой,
и ноль в случае совпадания строк.
\note Это просто расширенная реализация функции wcscmp(const wchar_t* ptr1,const wchar_t* ptr2)
*/
int CmpWstr(const void* ptr1, const void* ptr2, int inc = 1);

/**
\brief  Функция сортировки строк из файла
\detail Данная функция сортирует строки, считываемых из файла in_filename, и записывает результат в out_filename.
Имеется возможность сравнивать строки с конца, для этого используется параметр isDirect.
Если dir == Direct, то буквы стоящие в начале строки имеют больший приоритет, чем последующие.
Если dir == Inverse, то значимость букв увеличивается по мере приближения к концу строки.
\params [in]      inFilename       Имя входного файла
\params [in]      outFilename      Имя выходного файла
\params [in]      dir              Флаг, задающий направление сортировки строк
Краткое описание алгоритма:
1. На основе считанных из файла строк формируется одна строка STR1, в которой каждая строка исходного файла
отделена от других строк нулевым символом.
2. Строится таблица соответствий между подстроками в STR1 и STR2.
3. Производится сортировка данной таблицы.
4. Результат записываем в выходной файл.
*/
void SortFromFile(const char* in_filename, const char* out_filename, Direction dir = Direct);






/**
\brief Структура, описывающая соответствие между подстроками
*/
struct Link
{
    wchar_t* start;               ///< начало строки, считанной из файла
    wchar_t* end;                 ///< начало строки, считанной из файла

};



